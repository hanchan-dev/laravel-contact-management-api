<?php

namespace Tests\Feature;

use App\Models\Contact;
use App\Models\User;
use App\Services\ContactService;
use App\Services\UserService;
use Database\Seeders\ContactSeeder;
use Database\Seeders\UserSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Http\Request;
use Illuminate\Http\Resources\Json\ResourceCollection;
use Tests\TestCase;

class ContactServiceTest extends TestCase
{

    public ContactService $contactService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->contactService = $this->app->make(ContactService::class);
    }

    public function testCreateSuccess()
    {
        $this->seed(UserSeeder::class);
        $user = User::query()->first();
        $data = [
            'first_name' => 'dummy',
            'last_name' => 'dummy',
            'email' => 'dummy@dummy.com',
            'phone' => '+62 812 3456 6789',
        ];

        $response = $this->contactService->create($user, $data);
        self::assertNotNull($response);
        self::assertEquals('dummy@dummy.com', $response->email);
    }

    public function testContactGetSuccess()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();

        $response = $this->contactService->get($contact->id, $user);
        self::assertNotNull($response);
        self::assertEquals($response->email, $contact->email);
    }

    public function testContactGetFailed()
    {
        self::expectException(HttpResponseException::class);
        $this->seed([UserSeeder::class, ContactSeeder::class]);
        $user = User::query()->first();

        $response = $this->contactService->get('123', $user);
        self::assertNull($response);
    }

    public function testUpdateSuccess()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();

        $data = [
            'first_name' => 'new',
            'last_name' => 'new',
            'email' => 'dummy@dummy.com',
            'phone' => '+62 812 3456 6789',
        ];

        $response = $this->contactService->update($contact->id, $user, $data);
        self::assertNotNull($response);
        self::assertEquals('new', $response->first_name);
    }

    public function testDelete()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();

        $response = $this->contactService->delete($contact->id, $user);
        self::assertNotNull($response);
        self::assertTrue($response);
    }

    public function testSearch()
    {
        $request = Request::create('/contacts', 'GET');
        $this->seed([UserSeeder::class, ContactSeeder::class]);
        $user = User::query()->first();

        $response = $this->contactService->search($user, $request);
        self::assertNotNull($response);
    }


}
