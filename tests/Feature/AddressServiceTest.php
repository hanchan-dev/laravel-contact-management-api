<?php

namespace Tests\Feature;

use App\Models\Address;
use App\Models\Contact;
use App\Models\User;
use App\Services\AddressService;
use App\Services\ContactService;
use Database\Seeders\AddressSeeder;
use Database\Seeders\ContactSeeder;
use Database\Seeders\UserSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Exceptions\HttpResponseException;
use Tests\TestCase;

class AddressServiceTest extends TestCase
{
    public AddressService $addressService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->addressService = $this->app->make(AddressService::class);
    }

    public function testCreateAddress()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();
        $data = [
            'street' => 'testStreet',
            'city' => 'testCity',
            'province' => 'testProvince',
            'country' => 'testCountry',
            'postal_code' => '123123',
            'contact_id' => $contact->id,
        ];

        $response = $this->addressService->create($contact->id, $user, $data);
        self::assertNotNull($response);
        self::assertEquals('testCity', $response->city);
    }

    public function testGetAddress()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class, AddressSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();
        $address = Address::query()->first();

        $response = $this->addressService->get($contact->id, $address->id, $user);
        self::assertNotNull($response);
        self::assertEquals('testStreet', $response->street);
    }

    public function testGetAddressFailed()
    {
        self::expectException(HttpResponseException::class);
        $this->seed([UserSeeder::class, ContactSeeder::class, AddressSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();

        $response = $this->addressService->get($contact->id, '123123', $user);
        self::assertNotNull($response);
    }

    public function testUpdateAddress()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class, AddressSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();
        $address = Address::query()->first();
        $data = [
            'street' => 'testStreet',
            'city' => 'newCity',
            'province' => 'testProvince',
            'country' => 'testCountry',
            'postal_code' => '123123',
        ];

        $response = $this->addressService->update($contact->id, $address->id, $user, $data);
        self::assertNotNull($response);
        self::assertEquals('newCity', $response->city);
    }


    public function testDeleteAddress()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class, AddressSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();
        $address = Address::query()->first();

        $response = $this->addressService->delete($contact->id, $address->id, $user);
        self::assertNotNull($response);
        self::assertTrue($response);
    }

    public function testListSuccess()
    {
        $this->seed([UserSeeder::class, ContactSeeder::class, AddressSeeder::class]);
        $user = User::query()->first();
        $contact = Contact::query()->first();

        $response = $this->addressService->list($contact->id, $user);
        self::assertNotNull($response);
        self::assertCount(2, $response);
    }

}
