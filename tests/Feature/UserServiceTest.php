<?php

namespace Tests\Feature;

use App\Models\User;
use App\Services\UserService;
use Database\Seeders\UserSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Exceptions\HttpResponseException;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class UserServiceTest extends TestCase
{
    public userService $userService;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userService = $this->app->make(UserService::class);
    }

    public function testRegister()
    {
        $data = [
            'username' => 'hanchan',
            'password' => Hash::make('hanchan123'),
            'name' => 'Handika',
        ];

        $response = $this->userService->register($data);
        self::assertNotNull($response);
        self::assertEquals('hanchan', $response->username);
    }

    public function testRegisterFailed()
    {
        $this->seed(UserSeeder::class);
        self::expectException(HttpResponseException::class);

        $data = [
            'username' => 'dummy',
            'password' => 'hanchan123',
            'name' => 'Handika',
        ];

        $this->userService->register($data);
    }

    public function testLoginSuccess()
    {
        $this->seed(UserSeeder::class);

        $data = [
            'username' => 'dummy',
            'password' => 'dummy',
        ];

        $response = $this->userService->login($data);
        self::assertNotNull($response);
        self::assertNotNull($response->token);
    }

    public function testLoginFailed()
    {

        self::expectException(HttpResponseException::class);

        $data = [
            'username' => 'dummy',
            'password' => 'dummy',
        ];

        $this->userService->login($data);

    }

    public function testUpdate()
    {
        $this->seed(UserSeeder::class);
        $user = User::query()->first();

        $data = [
            'name' => 'new',
        ];

        $this->userService->update($user, $data);
        self::assertEquals('new', $user->name);
    }


    public function testLogout()
    {
        $this->seed(UserSeeder::class);
        $user = User::query()->first();

        $data = [
            'username' => 'dummy',
            'password' => 'dummy',
        ];

        $response = $this->userService->login($data);

        $response = $this->userService->logout($user);
        self::assertNotNull($response);
        self::assertNull($response->token);
    }


}
